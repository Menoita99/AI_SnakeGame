<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>AI_SnakeGame</groupId>
	<artifactId>AI_SnakeGame</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>11</release>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.10</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.jenetics</groupId>
			<artifactId>jenetics</artifactId>
			<version>6.1.0</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx</artifactId>
			<version>16-ea+1</version>
			<type>pom</type>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>16-ea+1</version>
		</dependency>

		<!-- deeplearning4j-core: contains main functionality and neural networks -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
			<version>1.0.0-beta7</version>
		</dependency>


		<!-- ND4J backend: every project needs one of these. The backend defines 
			the hardware on which network training will occur. "nd4j-native-platform" 
			is for CPUs only (for running on all operating systems). -->
		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>nd4j-native</artifactId>
			<version>1.0.0-beta7</version>
		</dependency>
		
		<dependency>
		    <groupId>org.nd4j</groupId>
		    <artifactId>nd4j-native</artifactId>
		    <version>1.0.0-beta7</version>
		    <classifier>windows-x86_64-avx2</classifier>
		</dependency>

		<!-- CUDA: to use GPU for training (CUDA) instead of CPU, uncomment this, 
			and remove nd4j-native-platform -->
		<!-- Requires CUDA to be installed to use. Change the version (8.0, 9.0, 
			9.1) to change the CUDA version -->
		<!-- <dependency> <groupId>org.nd4j</groupId> <artifactId>nd4j-cuda-9.2-platform</artifactId> 
			<version>1.0.0-beta7</version> </dependency> -->

		<!-- Optional, but recommended: if you use CUDA, also use CuDNN. To use 
			this, CuDNN must also be installed -->
		<!-- See: https://deeplearning4j.konduit.ai/config/backends/config-cudnn#using-deeplearning-4-j-with-cudnn -->
		<!-- <dependency> <groupId>org.deeplearning4j</groupId> <artifactId>deeplearning4j-cuda-9.2</artifactId> 
			<version>1.0.0-beta7</version> </dependency> -->

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
	</dependencies>
</project>